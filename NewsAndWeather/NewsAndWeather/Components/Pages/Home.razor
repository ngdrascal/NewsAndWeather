@page "/"
@rendermode @(new InteractiveServerRenderMode(false))
@using WeatherDataClients

@inject IWeatherClientCollection WeatherClientCollection

<PageTitle>News and Weather</PageTitle>

<Clock />

@if (_locationWeather.Count == 0)
{
    <p><em>@_message</em></p>
}
else
{
    <div id="daily-carousel" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner">
            Console.WriteLine(lw.LocationName);
            <div class="carousel-item active">
                <div class="card-group">
                    @foreach (var item in _locationWeather[0].DailyForecasts.Take(5))
                    {
                        <DailyForecast Date="@item.Date"
                                       LowTemp="@item.LowTemp"
                                       HighTemp="@item.HighTemp"
                                       Description="Partly Sunny"
                                       Icon="02d" />
                    }
                </div>
            </div>
            <div class="carousel-item">
                <p>Current Conditions for _locationWeather[0].LocationName</p>

            </div>
        </div>
    </div>
}

@code
{
    private string _message = "Loading ...";
    private readonly List<WeatherData> _locationWeather = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            foreach (var client in WeatherClientCollection.GetAll())
            {
                var data = await client.GetForecastsAsync();
                if (data != null)
                    _locationWeather.Add(data);

            }

        }
        catch (Exception)
        {
            _message = "Forecasts currently unavailable.";
        }
    }
}
