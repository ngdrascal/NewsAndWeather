@using System.Timers

@implements IDisposable
@rendermode @(new InteractiveServerRenderMode(false))

<div style="line-height: 1;">
    <span class="clock-time">@if(_addSpace){<span>&nbsp;</span>}@_hours</span>
    <span class="clock-time blink">:</span>
    <span class="clock-time">@_minutes</span>
    <span class="clock-meridiem">@_meridiem</span>
</div>
<h4 class="text-center">@_date</h4>

@code {
    private Timer? _timer;
    private string? _hours;
    private string? _minutes;
    private string? _meridiem;
    private string? _date;
    private bool _addSpace = false;

    protected override void OnInitialized()
    {
        var now = DateTime.Now;
        FormatDateAndTime(now);
        _addSpace = SpaceNeeded(now);

        _timer = new Timer(1000);
        _timer.AutoReset = true;
        _timer.Enabled = true;
        _timer.Elapsed += (_, _) => OnTimerElapsed();
    }

    private void FormatDateAndTime(DateTime dt)
    {
        var hour = dt.Hour > 12 ? dt.Hour - 12 : dt.Hour;
        _hours = hour.ToString();
        _minutes = dt.ToString("mm");
        _meridiem = dt.ToString("tt");

        _date = dt.ToString("dddd MMMM d");
    }

    private bool SpaceNeeded(DateTime dt)
    {
        var hour = dt.Hour > 12 ? dt.Hour - 12 : dt.Hour;
        return hour < 10;
    }

    private void OnTimerElapsed()
    {
        _ = InvokeAsync(() =>
        {
            FormatDateAndTime(DateTime.Now);
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}